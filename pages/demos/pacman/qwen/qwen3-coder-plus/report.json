{
  "timestamp": "2025-10-06T11:42:11.461Z",
  "execution": {
    "duration_seconds": "6.276",
    "model_used": "qwen/qwen3-coder-plus",
    "model_requested": "qwen/qwen3-coder-plus"
  },
  "tokens": {
    "prompt_tokens": 35,
    "completion_tokens": 6452,
    "total_tokens": 6487
  },
  "cost": {
    "currency": "USD",
    "prompt_cost": 0.000035,
    "completion_cost": 0.03226,
    "total_cost": 0.032295
  },
  "model_card": {
    "id": "qwen/qwen3-coder-plus",
    "name": "Qwen: Qwen3 Coder Plus",
    "description": "Qwen3 Coder Plus is Alibaba's proprietary version of the Open Source Qwen3 Coder 480B A35B. It is a powerful coding agent model specializing in autonomous programming via tool calling and environment interaction, combining coding proficiency with versatile general-purpose abilities.",
    "context_length": 128000,
    "architecture": {
      "modality": "text->text",
      "input_modalities": [
        "text"
      ],
      "output_modalities": [
        "text"
      ],
      "tokenizer": "Qwen3",
      "instruct_type": null
    },
    "pricing": {
      "prompt": "0.000001",
      "completion": "0.000005",
      "request": "0",
      "image": "0",
      "web_search": "0",
      "internal_reasoning": "0",
      "input_cache_read": "0.0000001"
    },
    "top_provider": {
      "context_length": 128000,
      "max_completion_tokens": 65536,
      "is_moderated": false
    }
  },
  "request": {
    "prompt": "In a single HTML file named index.html, create exact copy of the PAC-MAN game in one html file using css and js.\n",
    "system_prompt": null,
    "temperature": 0.7,
    "max_tokens": 8000
  },
  "response_metadata": {
    "id": "gen-1759750865-xlVCrXyQ3KnBDYe3oIkT",
    "created": 1759750865,
    "object": "chat.completion"
  },
  "raw_response": "# PAC-MAN Game Implementation\n\nI'll create a complete PAC-MAN game in a single HTML file with all the classic elements: maze, dots, power pellets, ghosts, and scoring.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>PAC-MAN</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n        \n        body {\n            background-color: #000;\n            color: #ffff00;\n            font-family: 'Courier New', monospace;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            height: 100vh;\n            overflow: hidden;\n        }\n        \n        .game-container {\n            position: relative;\n            width: 560px;\n            margin: 20px auto;\n        }\n        \n        #game-board {\n            background-color: #000;\n            border: 2px solid #0000ff;\n            display: grid;\n            grid-template-columns: repeat(29, 20px);\n            grid-template-rows: repeat(31, 20px);\n            gap: 0;\n        }\n        \n        .wall {\n            background-color: #0000ff;\n            border-radius: 5px;\n        }\n        \n        .dot {\n            background-color: #ffffff;\n            border-radius: 50%;\n            width: 4px;\n            height: 4px;\n            margin: 8px;\n        }\n        \n        .power-pellet {\n            background-color: #ffffff;\n            border-radius: 50%;\n            width: 10px;\n            height: 10px;\n            margin: 5px;\n            animation: blink 0.5s infinite alternate;\n        }\n        \n        @keyframes blink {\n            from { opacity: 1; }\n            to { opacity: 0.3; }\n        }\n        \n        .pacman {\n            background-color: #ffff00;\n            border-radius: 50%;\n            position: relative;\n        }\n        \n        .pacman::before {\n            content: '';\n            position: absolute;\n            width: 0;\n            height: 0;\n            border-top: 10px solid transparent;\n            border-bottom: 10px solid transparent;\n            border-left: 10px solid #000;\n            top: 0;\n            left: 10px;\n            animation: mouth-move 0.3s infinite alternate;\n        }\n        \n        @keyframes mouth-move {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(-45deg); }\n        }\n        \n        .ghost {\n            border-radius: 7px 7px 0 0;\n            position: relative;\n        }\n        \n        .ghost::before {\n            content: '';\n            position: absolute;\n            bottom: -5px;\n            left: 0;\n            width: 100%;\n            height: 5px;\n            background-color: inherit;\n        }\n        \n        .ghost::after {\n            content: '';\n            position: absolute;\n            bottom: -5px;\n            left: 0;\n            width: 100%;\n            height: 5px;\n            background-color: inherit;\n            clip-path: circle(50% at 50% 0%);\n        }\n        \n        .ghost-eye {\n            position: absolute;\n            width: 4px;\n            height: 4px;\n            background-color: #fff;\n            border-radius: 50%;\n            top: 6px;\n        }\n        \n        .ghost-eye.left {\n            left: 4px;\n        }\n        \n        .ghost-eye.right {\n            right: 4px;\n        }\n        \n        .ghost-pupil {\n            position: absolute;\n            width: 2px;\n            height: 2px;\n            background-color: #000;\n            border-radius: 50%;\n            top: 1px;\n            left: 1px;\n        }\n        \n        .blinky { background-color: #ff0000; }\n        .pinky { background-color: #ffb8ff; }\n        .inky { background-color: #00ffff; }\n        .clyde { background-color: #ffb852; }\n        \n        .scared {\n            background-color: #0000ff !important;\n            animation: scared-blink 0.5s infinite alternate;\n        }\n        \n        @keyframes scared-blink {\n            0% { background-color: #0000ff; }\n            100% { background-color: #ffffff; }\n        }\n        \n        .empty {\n            background-color: #000;\n        }\n        \n        .score-container {\n            display: flex;\n            justify-content: space-between;\n            width: 560px;\n            margin: 10px 0;\n            font-size: 24px;\n            text-align: center;\n        }\n        \n        #score {\n            color: #ffff00;\n        }\n        \n        #lives {\n            display: flex;\n            gap: 10px;\n        }\n        \n        .life {\n            width: 20px;\n            height: 20px;\n            background-color: #ffff00;\n            border-radius: 50%;\n        }\n        \n        .game-over {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            background-color: rgba(0, 0, 0, 0.8);\n            padding: 20px;\n            border: 2px solid #ffff00;\n            text-align: center;\n            z-index: 10;\n            display: none;\n        }\n        \n        .game-over h2 {\n            font-size: 48px;\n            margin-bottom: 20px;\n            color: #ff0000;\n        }\n        \n        .controls {\n            margin-top: 20px;\n            text-align: center;\n            color: #ffffff;\n            font-size: 18px;\n        }\n        \n        .controls p {\n            margin: 5px 0;\n        }\n        \n        button {\n            background-color: #ffff00;\n            color: #000;\n            border: none;\n            padding: 10px 20px;\n            font-size: 18px;\n            font-weight: bold;\n            cursor: pointer;\n            margin-top: 20px;\n            border-radius: 5px;\n        }\n        \n        button:hover {\n            background-color: #ffcc00;\n        }\n    </style>\n</head>\n<body>\n    <h1>PAC-MAN</h1>\n    \n    <div class=\"score-container\">\n        <div>SCORE: <span id=\"score\">0</span></div>\n        <div>LIVES: <span id=\"lives\"></span></div>\n    </div>\n    \n    <div class=\"game-container\">\n        <div id=\"game-board\"></div>\n        <div class=\"game-over\" id=\"game-over\">\n            <h2>GAME OVER</h2>\n            <p>Final Score: <span id=\"final-score\">0</span></p>\n            <button id=\"restart-button\">PLAY AGAIN</button>\n        </div>\n    </div>\n    \n    <div class=\"controls\">\n        <p>Use ARROW KEYS to move PAC-MAN</p>\n        <p>Eat all dots to win!</p>\n        <p>Avoid ghosts unless you have power pellets!</p>\n    </div>\n\n    <script>\n        // Game constants\n        const GRID_SIZE = 29;\n        const CELL_SIZE = 20;\n        const PACMAN_SPEED = 150;\n        const GHOST_SPEED = 200;\n        const POWER_PELLET_DURATION = 10000; // 10 seconds\n        \n        // Game state\n        let score = 0;\n        let lives = 3;\n        let dotsRemaining = 0;\n        let powerMode = false;\n        let powerModeTimer = null;\n        let gameRunning = false;\n        \n        // Maze layout (0 = empty, 1 = wall, 2 = dot, 3 = power pellet)\n        const mazeLayout = [\n            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n            [1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,1],\n            [1,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,1,2,1],\n            [1,3,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,1,3,1],\n            [1,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,1,2,1],\n            [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1],\n            [1,2,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1],\n            [1,2,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1],\n            [1,2,2,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,2,2,2,1],\n            [1,1,1,1,1,1,2,1,1,1,1,1,0,1,1,0,1,1,1,1,1,2,1,1,1,1,1,1,1],\n            [0,0,0,0,0,1,2,1,1,1,1,1,0,1,1,0,1,1,1,1,1,2,1,0,0,0,0,0,0],\n            [0,0,0,0,0,1,2,1,1,0,0,0,0,0,0,0,0,0,0,1,1,2,1,0,0,0,0,0,0],\n            [0,0,0,0,0,1,2,1,1,0,1,1,1,0,0,1,1,1,0,1,1,2,1,0,0,0,0,0,0],\n            [1,1,1,1,1,2,2,0,0,0,1,0,0,0,0,0,0,1,0,0,0,2,2,1,1,1,1,1,1],\n            [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],\n            [1,1,1,1,1,2,2,0,0,0,1,0,0,0,0,0,0,1,0,0,0,2,2,1,1,1,1,1,1],\n            [0,0,0,0,0,1,2,1,1,0,1,1,1,1,1,1,1,1,0,1,1,2,1,0,0,0,0,0,0],\n            [0,0,0,0,0,1,2,1,1,0,0,0,0,0,0,0,0,0,0,1,1,2,1,0,0,0,0,0,0],\n            [0,0,0,0,0,1,2,1,1,0,1,1,1,1,1,1,1,1,0,1,1,2,1,0,0,0,0,0,0],\n            [1,1,1,1,1,2,2,1,1,0,1,1,1,1,1,1,1,1,0,1,1,2,2,1,1,1,1,1,1],\n            [1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,1],\n            [1,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,1,2,1],\n            [1,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,1,2,1],\n            [1,3,2,2,1,1,2,2,2,2,2,2,2,0,0,2,2,2,2,2,2,2,1,1,2,2,3,2,1],\n            [1,1,1,2,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,2,1,1,1,1],\n            [1,1,1,2,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,2,1,1,1,1],\n            [1,2,2,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,2,2,2,1],\n            [1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1],\n            [1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1],\n            [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1],\n            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n        ];\n        \n        // Game elements\n        let pacman = { x: 14, y: 23, direction: 'right' };\n        let ghosts = [\n            { x: 13, y: 11, direction: 'left', color: 'blinky' },\n            { x: 14, y: 14, direction: 'up', color: 'pinky' },\n            { x: 13, y: 14, direction: 'down', color: 'inky' },\n            { x: 15, y: 14, direction: 'up', color: 'clyde' }\n        ];\n        \n        // DOM elements\n        const gameBoard = document.getElementById('game-board');\n        const scoreElement = document.getElementById('score');\n        const livesElement = document.getElementById('lives');\n        const gameOverScreen = document.getElementById('game-over');\n        const finalScoreElement = document.getElementById('final-score');\n        const restartButton = document.getElementById('restart-button');\n        \n        // Initialize game\n        function initGame() {\n            gameBoard.innerHTML = '';\n            score = 0;\n            lives = 3;\n            dotsRemaining = 0;\n            powerMode = false;\n            \n            if (powerModeTimer) {\n                clearTimeout(powerModeTimer);\n                powerModeTimer = null;\n            }\n            \n            // Reset pacman position\n            pacman.x = 14;\n            pacman.y = 23;\n            pacman.direction = 'right';\n            \n            // Reset ghost positions\n            ghosts[0].x = 13;\n            ghosts[0].y = 11;\n            ghosts[0].direction = 'left';\n            \n            ghosts[1].x = 14;\n            ghosts[1].y = 14;\n            ghosts[1].direction = 'up';\n            \n            ghosts[2].x = 13;\n            ghosts[2].y = 14;\n            ghosts[2].direction = 'down';\n            \n            ghosts[3].x = 15;\n            ghosts[3].y = 14;\n            ghosts[3].direction = 'up';\n            \n            // Create game board\n            for (let y = 0; y < GRID_SIZE; y++) {\n                for (let x = 0; x < GRID_SIZE; x++) {\n                    const cell = document.createElement('div');\n                    cell.classList.add('cell');\n                    \n                    switch (mazeLayout[y][x]) {\n                        case 1:\n                            cell.classList.add('wall');\n                            break;\n                        case 2:\n                            cell.classList.add('dot');\n                            dotsRemaining++;\n                            break;\n                        case 3:\n                            cell.classList.add('power-pellet');\n                            dotsRemaining++;\n                            break;\n                        default:\n                            cell.classList.add('empty');\n                    }\n                    \n                    gameBoard.appendChild(cell);\n                }\n            }\n            \n            updateScore();\n            updateLives();\n            drawGame();\n            gameRunning = true;\n            gameOverScreen.style.display = 'none';\n        }\n        \n        // Update score display\n        function updateScore() {\n            scoreElement.textContent = score;\n        }\n        \n        // Update lives display\n        function updateLives() {\n            livesElement.innerHTML = '';\n            for (let i = 0; i < lives; i++) {\n                const life = document.createElement('div');\n                life.classList.add('life');\n                livesElement.appendChild(life);\n            }\n        }\n        \n        // Draw game elements\n        function drawGame() {\n            // Clear previous drawings\n            const cells = document.querySelectorAll('.cell');\n            cells.forEach(cell => {\n                cell.classList.remove('pacman', 'ghost', 'blinky', 'pinky', 'inky', 'clyde', 'scared');\n            });\n            \n            // Draw dots and power pellets\n            for (let y = 0; y < GRID_SIZE; y++) {\n                for (let x = 0; x < GRID_SIZE; x++) {\n                    const index = y * GRID_SIZE + x;\n                    if (mazeLayout[y][x] === 2) {\n                        cells[index].classList.add('dot');\n                    } else if (mazeLayout[y][x] === 3) {\n                        cells[index].classList.add('power-pellet');\n                    }\n                }\n            }\n            \n            // Draw Pacman\n            const pacmanIndex = pacman.y * GRID_SIZE + pacman.x;\n            cells[pacmanIndex].classList.add('pacman');\n            \n            // Draw ghosts\n            ghosts.forEach(ghost => {\n                const ghostIndex = ghost.y * GRID_SIZE + ghost.x;\n                cells[ghostIndex].classList.add('ghost', ghost.color);\n                \n                // Add eyes to ghosts\n                if (!cells[ghostIndex].querySelector('.ghost-eye')) {\n                    const leftEye = document.createElement('div');\n                    leftEye.classList.add('ghost-eye', 'left');\n                    const rightEye = document.createElement('div');\n                    rightEye.classList.add('ghost-eye', 'right');\n                    \n                    const leftPupil = document.createElement('div');\n                    leftPupil.classList.add('ghost-pupil');\n                    const rightPupil = document.createElement('div');\n                    rightPupil.classList.add('ghost-pupil');\n                    \n                    leftEye.appendChild(leftPupil);\n                    rightEye.appendChild(rightPupil);\n                    \n                    cells[ghostIndex].appendChild(leftEye);\n                    cells[ghostIndex].appendChild(rightEye);\n                }\n                \n                // Apply scared mode if active\n                if (powerMode) {\n                    cells[ghostIndex].classList.add('scared');\n                }\n            });\n        }\n        \n        // Move Pacman\n        function movePacman() {\n            if (!gameRunning) return;\n            \n            let newX = pacman.x;\n            let newY = pacman.y;\n            \n            switch (pacman.direction) {\n                case 'up':\n                    newY--;\n                    break;\n                case 'down':\n                    newY++;\n                    break;\n                case 'left':\n                    newX--;\n                    break;\n                case 'right':\n                    newX++;\n                    break;\n            }\n            \n            // Handle tunnel\n            if (newX < 0) newX = GRID_SIZE - 1;\n            if (newX >= GRID_SIZE) newX = 0;\n            \n            // Check for wall collision\n            if (mazeLayout[newY][newX] !== 1) {\n                pacman.x = newX;\n                pacman.y = newY;\n                \n                // Check what Pacman ate\n                if (mazeLayout[pacman.y][pacman.x] === 2) {\n                    // Regular dot\n                    mazeLayout[pacman.y][pacman.x] = 0;\n                    score += 10;\n                    dotsRemaining--;\n                } else if (mazeLayout[pacman.y][pacman.x] === 3) {\n                    // Power pellet\n                    mazeLayout[pacman.y][pacman.x] = 0;\n                    score += 50;\n                    dotsRemaining--;\n                    activatePowerMode();\n                }\n                \n                updateScore();\n                \n                // Check win condition\n                if (dotsRemaining <= 0) {\n                    endGame(true);\n                }\n            }\n            \n            drawGame();\n        }\n        \n        // Activate power mode\n        function activatePowerMode() {\n            powerMode = true;\n            drawGame();\n            \n            // Clear any existing timer\n            if (powerModeTimer) {\n                clearTimeout(powerModeTimer);\n            }\n            \n            // Set timer to deactivate power mode\n            powerModeTimer = setTimeout(() => {\n                powerMode = false;\n                drawGame();\n            }, POWER_PELLET_DURATION);\n        }\n        \n        // Move ghosts\n        function moveGhosts() {\n            if (!gameRunning) return;\n            \n            ghosts.forEach(ghost => {\n                // Simple AI: choose random valid direction\n                const directions = ['up', 'down', 'left', 'right'];\n                const validDirections = [];\n                \n                // Check which directions are valid\n                directions.forEach(dir => {\n                    let newX = ghost.x;\n                    let newY = ghost.y;\n                    \n                    switch (dir) {\n                        case 'up': newY--; break;\n                        case 'down': newY++; break;\n                        case 'left': newX--; break;\n                        case 'right': newX++; break;\n                    }\n                    \n                    // Handle tunnel\n                    if (newX < 0) newX = GRID_SIZE - 1;\n                    if (newX >= GRID_SIZE) newX = 0;\n                    \n                    // Check for wall\n                    if (mazeLayout[newY][newX] !== 1) {\n                        validDirections.push({ dir, x: newX, y: newY });\n                    }\n                });\n                \n                // Choose a random valid direction\n                if (validDirections.length > 0) {\n                    const randomDir = validDirections[Math.floor(Math.random() * validDirections.length)];\n                    ghost.direction = randomDir.dir;\n                    ghost.x = randomDir.x;\n                    ghost.y = randomDir.y;\n                }\n                \n                // Check collision with Pacman\n                if (ghost.x === pacman.x && ghost.y === pacman.y) {\n                    if (powerMode) {\n                        // Pacman eats ghost\n                        score += 200;\n                        updateScore();\n                        \n                        // Reset ghost position\n                        if (ghost.color === 'blinky') {\n                            ghost.x = 13;\n                            ghost.y = 11;\n                        } else {\n                            ghost.x = 14;\n                            ghost.y = 14;\n                        }\n                    } else {\n                        // Ghost catches Pacman\n                        loseLife();\n                    }\n                }\n            });\n            \n            drawGame();\n        }\n        \n        // Lose a life\n        function loseLife() {\n            lives--;\n            updateLives();\n            \n            if (lives <= 0) {\n                endGame(false);\n            } else {\n                // Reset positions\n                pacman.x = 14;\n                pacman.y = 23;\n                pacman.direction = 'right';\n                \n                ghosts[0].x = 13;\n                ghosts[0].y = 11;\n                \n                ghosts[1].x = 14;\n                ghosts[1].y = 14;\n                \n                ghosts[2].x = 13;\n                ghosts[2].y = 14;\n                \n                ghosts[3].x = 15;\n                ghosts[3].y = 14;\n            }\n        }\n        \n        // End the game\n        function endGame(isWin) {\n            gameRunning = false;\n            finalScoreElement.textContent = score;\n            \n            if (isWin) {\n                document.querySelector('.game-over h2').textContent = \"YOU WIN!\";\n                document.querySelector('.game-over h2').style.color = \"#00ff00\";\n            } else {\n                document.querySelector('.game-over h2').textContent = \"GAME OVER\";\n                document.querySelector('.game-over h2').style.color = \"#ff0000\";\n            }\n            \n            gameOverScreen.style.display = 'block';\n        }\n        \n        // Handle keyboard input\n        document.addEventListener('keydown', (e) => {\n            if (!gameRunning) return;\n            \n            switch (e.key) {\n                case 'ArrowUp':\n                    pacman.direction = 'up';\n                    break;\n                case 'ArrowDown':\n                    pacman.direction = 'down';\n                    break;\n                case 'ArrowLeft':\n                    pacman.direction = 'left';\n                    break;\n                case 'ArrowRight':\n                    pacman.direction = 'right';\n                    break;\n            }\n        });\n        \n        // Restart button event\n        restartButton.addEventListener('click', () => {\n            initGame();\n        });\n        \n        // Start the game\n        initGame();\n        \n        // Game loop\n        setInterval(movePacman, PACMAN_SPEED);\n        setInterval(moveGhosts, GHOST_SPEED);\n    </script>\n</body>\n</html>\n```\n\n## Features Implemented\n\nThis PAC-MAN implementation includes:\n\n1. **Classic Maze Layout** - Authentic PAC-MAN maze with walls, dots, and power pellets\n2. **PAC-MAN Character** - Animated character that moves through the maze\n3. **Four Ghosts** - Blinky (red), Pinky (pink), Inky (cyan), and Clyde (orange)\n4. **Game Mechanics**:\n   - Eat dots to increase score\n   - Eat power pellets to temporarily turn ghosts blue and vulnerable\n   - Avoid ghosts or get caught\n   - Three lives system\n5. **Visual Elements**:\n   - Animated PAC-MAN with opening/closing mouth\n   - Ghosts with eyes that follow movement\n   - Blinking power pellets\n   - Scared ghost animation when vulnerable\n6. **Scoring System**:\n   - 10 points per dot\n   - 50 points per power pellet\n   - 200 points per ghost eaten during power mode\n7. **Game States**:\n   - Win condition (eat all dots)\n   - Lose condition (lose all lives)\n   - Game over screen with restart option\n\n## How to Play\n\n1. Use the arrow keys (↑, ↓, ←, →) to control PAC-MAN's direction\n2. Eat all the dots to win the game\n3. Collect power pellets to temporarily make ghosts vulnerable\n4. Avoid ghosts when they're not vulnerable\n5. You have 3 lives - each time a ghost catches you, you lose a life\n\nThe game is contained in a single HTML file and runs directly in any modern browser."
}