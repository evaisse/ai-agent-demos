{
  "timestamp": "2025-10-02T13:15:10.730Z",
  "execution": {
    "duration_seconds": "16.378",
    "model_used": "x-ai/grok-code-fast-1",
    "model_requested": "x-ai/grok-code-fast-1"
  },
  "tokens": {
    "prompt_tokens": 231,
    "completion_tokens": 3778,
    "total_tokens": 4009
  },
  "cost": {
    "currency": "USD",
    "prompt_cost": 0.000046,
    "completion_cost": 0.005667,
    "total_cost": 0.005713
  },
  "model_card": {
    "id": "x-ai/grok-code-fast-1",
    "name": "xAI: Grok Code Fast 1",
    "description": "Grok Code Fast 1 is a speedy and economical reasoning model that excels at agentic coding. With reasoning traces visible in the response, developers can steer Grok Code for high-quality work flows.",
    "context_length": 256000,
    "architecture": {
      "input_modalities": [
        "text"
      ],
      "instruct_type": null,
      "modality": "text->text",
      "output_modalities": [
        "text"
      ],
      "tokenizer": "Grok"
    },
    "pricing": {
      "completion": "0.0000015",
      "image": "0",
      "input_cache_read": "0.00000002",
      "internal_reasoning": "0",
      "prompt": "0.0000002",
      "request": "0",
      "web_search": "0"
    },
    "top_provider": {
      "context_length": 256000,
      "is_moderated": false,
      "max_completion_tokens": 10000
    }
  },
  "request": {
    "prompt": "In a single HTML file named index.html, create exact copy of the PAC-MAN game in one html file using css and js.\n",
    "system_prompt": null,
    "temperature": 0.7,
    "max_tokens": 8000
  },
  "response_metadata": {
    "id": "gen-1759410895-iCtC5mbpdSEuCqiOAZym",
    "created": 1759410895,
    "object": "chat.completion"
  },
  "raw_response": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>PAC-MAN Game</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            background-color: #000;\n            font-family: Arial, sans-serif;\n            color: #fff;\n        }\n        canvas {\n            border: 2px solid #fff;\n        }\n        #score {\n            position: absolute;\n            top: 10px;\n            left: 10px;\n            font-size: 20px;\n        }\n        #lives {\n            position: absolute;\n            top: 10px;\n            right: 10px;\n            font-size: 20px;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"score\">Score: 0</div>\n    <div id=\"lives\">Lives: 3</div>\n    <canvas id=\"gameCanvas\" width=\"400\" height=\"400\"></canvas>\n    <script>\n        const canvas = document.getElementById('gameCanvas');\n        const ctx = canvas.getContext('2d');\n        const scoreDisplay = document.getElementById('score');\n        const livesDisplay = document.getElementById('lives');\n\n        // Maze layout (1 = wall, 0 = path, 2 = dot, 3 = power pellet, 4 = empty)\n        const maze = [\n            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n            [1,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,1],\n            [1,3,1,1,1,2,1,1,1,1,1,1,1,1,2,1,1,1,3,1],\n            [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1],\n            [1,2,1,1,1,2,1,2,1,1,1,1,2,1,2,1,1,1,2,1],\n            [1,2,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,2,1],\n            [1,1,1,1,1,2,1,1,1,0,0,1,1,1,2,1,1,1,1,1],\n            [0,0,0,0,1,2,1,0,0,0,0,0,0,1,2,1,0,0,0,0],\n            [1,1,1,1,1,2,1,0,1,1,1,1,0,1,2,1,1,1,1,1],\n            [0,0,0,0,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0],\n            [1,1,1,1,1,2,1,0,1,1,1,1,0,1,2,1,1,1,1,1],\n            [0,0,0,0,1,2,1,0,0,0,0,0,0,1,2,1,0,0,0,0],\n            [1,1,1,1,1,2,1,1,1,0,0,1,1,1,2,1,1,1,1,1],\n            [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1],\n            [1,2,1,1,1,2,1,1,1,1,1,1,1,1,2,1,1,1,2,1],\n            [1,3,2,2,1,2,2,2,2,2,2,2,2,2,2,1,2,2,3,1],\n            [1,1,2,2,1,2,1,2,1,1,1,1,2,1,2,1,2,2,1,1],\n            [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1],\n            [1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1],\n            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n        ];\n\n        const tileSize = 20;\n        let pacman = { x: 9.5, y: 15.5, dir: 0, nextDir: 0 }; // Position in tiles, direction (0=right, 1=down, 2=left, 3=up)\n        let ghosts = [\n            { x: 9.5, y: 9.5, dir: 0, color: 'red', mode: 'scatter' },\n            { x: 9.5, y: 10.5, dir: 1, color: 'pink', mode: 'scatter' },\n            { x: 8.5, y: 9.5, dir: 2, color: 'cyan', mode: 'scatter' },\n            { x: 10.5, y: 9.5, dir: 3, color: 'orange', mode: 'scatter' }\n        ];\n        let score = 0;\n        let lives = 3;\n        let powerMode = false;\n        let powerTimer = 0;\n\n        function drawMaze() {\n            ctx.fillStyle = '#000';\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n            ctx.fillStyle = '#00f';\n            for (let y = 0; y < maze.length; y++) {\n                for (let x = 0; x < maze[y].length; x++) {\n                    if (maze[y][x] === 1) {\n                        ctx.fillRect(x * tileSize, y * tileSize, tileSize, tileSize);\n                    } else if (maze[y][x] === 2) {\n                        ctx.fillStyle = '#fff';\n                        ctx.beginPath();\n                        ctx.arc(x * tileSize + tileSize / 2, y * tileSize + tileSize / 2, 3, 0, Math.PI * 2);\n                        ctx.fill();\n                    } else if (maze[y][x] === 3) {\n                        ctx.fillStyle = '#fff';\n                        ctx.beginPath();\n                        ctx.arc(x * tileSize + tileSize / 2, y * tileSize + tileSize / 2, 6, 0, Math.PI * 2);\n                        ctx.fill();\n                    }\n                }\n            }\n        }\n\n        function drawPacman() {\n            ctx.fillStyle = '#ff0';\n            ctx.beginPath();\n            let angle = pacman.dir * Math.PI / 2;\n            ctx.arc(pacman.x * tileSize, pacman.y * tileSize, tileSize / 2, angle + 0.2, angle + Math.PI * 1.8);\n            ctx.lineTo(pacman.x * tileSize, pacman.y * tileSize);\n            ctx.closePath();\n            ctx.fill();\n        }\n\n        function drawGhosts() {\n            ghosts.forEach(ghost => {\n                ctx.fillStyle = ghost.color;\n                ctx.fillRect(ghost.x * tileSize - tileSize / 2, ghost.y * tileSize - tileSize / 2, tileSize, tileSize);\n                // Simple eye\n                ctx.fillStyle = '#fff';\n                ctx.fillRect(ghost.x * tileSize - tileSize / 4 - 2, ghost.y * tileSize - tileSize / 4 - 2, 4, 4);\n                ctx.fillRect(ghost.x * tileSize + tileSize / 4 - 2, ghost.y * tileSize - tileSize / 4 - 2, 4, 4);\n            });\n        }\n\n        function movePacman() {\n            // Try to change direction\n            let newX = pacman.x;\n            let newY = pacman.y;\n            if (pacman.nextDir === 0) newX += 0.1;\n            else if (pacman.nextDir === 1) newY += 0.1;\n            else if (pacman.nextDir === 2) newX -= 0.1;\n            else if (pacman.nextDir === 3) newY -= 0.1;\n\n            if (!isWall(Math.floor(newX), Math.floor(newY)) && !isWall(Math.ceil(newX), Math.ceil(newY))) {\n                pacman.dir = pacman.nextDir;\n            }\n\n            // Move in current direction\n            if (pacman.dir === 0) pacman.x += 0.1;\n            else if (pacman.dir === 1) pacman.y += 0.1;\n            else if (pacman.dir === 2) pacman.x -= 0.1;\n            else if (pacman.dir === 3) pacman.y -= 0.1;\n\n            // Wrap around\n            if (pacman.x < 0) pacman.x = 19.9;\n            if (pacman.x > 20) pacman.x = 0.1;\n            if (pacman.y < 0) pacman.y = 19.9;\n            if (pacman.y > 20) pacman.y = 0.1;\n\n            // Eat dots\n            let tileX = Math.floor(pacman.x);\n            let tileY = Math.floor(pacman.y);\n            if (maze[tileY][tileX] === 2) {\n                maze[tileY][tileX] = 0;\n                score += 10;\n                scoreDisplay.textContent = 'Score: ' + score;\n            } else if (maze[tileY][tileX] === 3) {\n                maze[tileY][tileX] = 0;\n                score += 50;\n                powerMode = true;\n                powerTimer = 300; // 5 seconds at 60fps\n                scoreDisplay.textContent = 'Score: ' + score;\n            }\n        }\n\n        function moveGhosts() {\n            ghosts.forEach(ghost => {\n                // Simple random movement for now\n                let dirs = [0,1,2,3];\n                let validDirs = dirs.filter(d => {\n                    let nx = ghost.x, ny = ghost.y;\n                    if (d === 0) nx += 0.1;\n                    else if (d === 1) ny += 0.1;\n                    else if (d === 2) nx -= 0.1;\n                    else if (d === 3) ny -= 0.1;\n                    return !isWall(Math.floor(nx), Math.floor(ny));\n                });\n                if (validDirs.length > 0) {\n                    ghost.dir = validDirs[Math.floor(Math.random() * validDirs.length)];\n                }\n\n                if (ghost.dir === 0) ghost.x += 0.05;\n                else if (ghost.dir === 1) ghost.y += 0.05;\n                else if (ghost.dir === 2) ghost.x -= 0.05;\n                else if (ghost.dir === 3) ghost.y -= 0.05;\n\n                // Wrap around\n                if (ghost.x < 0) ghost.x = 19.9;\n                if (ghost.x > 20) ghost.x = 0.1;\n                if (ghost.y < 0) ghost.y = 19.9;\n                if (ghost.y > 20) ghost.y = 0.1;\n            });\n        }\n\n        function isWall(x, y) {\n            return maze[y] && maze[y][x] === 1;\n        }\n\n        function checkCollisions() {\n            ghosts.forEach(ghost => {\n                if (Math.abs(pacman.x - ghost.x) < 0.5 && Math.abs(pacman.y - ghost.y) < 0.5) {\n                    if (powerMode) {\n                        // Eat ghost\n                        ghost.x = 9.5;\n                        ghost.y = 9.5;\n                        score += 200;\n                        scoreDisplay.textContent = 'Score: ' + score;\n                    } else {\n                        // Lose life\n                        lives--;\n                        livesDisplay.textContent = 'Lives: ' + lives;\n                        if (lives <= 0) {\n                            alert('Game Over');\n                            resetGame();\n                        } else {\n                            pacman.x = 9.5;\n                            pacman.y = 15.5;\n                            pacman.dir = 0;\n                        }\n                    }\n                }\n            });\n        }\n\n        function resetGame() {\n            score = 0;\n            lives = 3;\n            pacman = { x: 9.5, y: 15.5, dir: 0, nextDir: 0 };\n            ghosts = [\n                { x: 9.5, y: 9.5, dir: 0, color: 'red', mode: 'scatter' },\n                { x: 9.5, y: 10.5, dir: 1, color: 'pink', mode: 'scatter' },\n                { x: 8.5, y: 9.5, dir: 2, color: 'cyan', mode: 'scatter' },\n                { x: 10.5, y: 9.5, dir: 3, color: 'orange', mode: 'scatter' }\n            ];\n            // Reset maze\n            for (let y = 0; y < maze.length; y++) {\n                for (let x = 0; x < maze[y].length; x++) {\n                    if (maze[y][x] === 0 && (y !== 9 || x !== 9)) { // Keep center empty\n                        maze[y][x] = 2; // Restore dots, but simplified\n                    }\n                }\n            }\n            scoreDisplay.textContent = 'Score: 0';\n            livesDisplay.textContent = 'Lives: 3';\n        }\n\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'ArrowRight') pacman.nextDir = 0;\n            else if (e.key === 'ArrowDown') pacman.nextDir = 1;\n            else if (e.key === 'ArrowLeft') pacman.nextDir = 2;\n            else if (e.key === 'ArrowUp') pacman.nextDir = 3;\n        });\n\n        function gameLoop() {\n            drawMaze();\n            movePacman();\n            moveGhosts();\n            checkCollisions();\n            drawPacman();\n            drawGhosts();\n\n            if (powerTimer > 0) {\n                powerTimer--;\n                if (powerTimer === 0) {\n                    powerMode = false;\n                }\n            }\n\n            requestAnimationFrame(gameLoop);\n        }\n\n        gameLoop();\n    </script>\n</body>\n</html>\n```"
}