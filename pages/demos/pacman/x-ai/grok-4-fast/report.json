{
  "timestamp": "2025-10-02T13:14:54.262Z",
  "execution": {
    "duration_seconds": "44.480",
    "model_used": "x-ai/grok-4-fast",
    "model_requested": "x-ai/grok-4-fast"
  },
  "tokens": {
    "prompt_tokens": 144,
    "completion_tokens": 4294,
    "total_tokens": 4438
  },
  "cost": {
    "currency": "USD",
    "prompt_cost": 0.000029,
    "completion_cost": 0.002147,
    "total_cost": 0.002176
  },
  "model_card": {
    "id": "x-ai/grok-4-fast",
    "name": "xAI: Grok 4 Fast",
    "description": "Grok 4 Fast is xAI's latest multimodal model with SOTA cost-efficiency and a 2M token context window. It comes in two flavors: non-reasoning and reasoning. Read more about the model on xAI's [news post](http://x.ai/news/grok-4-fast). Reasoning can be enabled using the `reasoning` `enabled` parameter in the API. [Learn more in our docs](https://openrouter.ai/docs/use-cases/reasoning-tokens#controlling-reasoning-tokens)\n\nPrompts and completions on Grok 4 Fast Free may be used by xAI or OpenRouter to improve future models.",
    "context_length": 2000000,
    "architecture": {
      "input_modalities": [
        "text",
        "image"
      ],
      "instruct_type": null,
      "modality": "text+image->text",
      "output_modalities": [
        "text"
      ],
      "tokenizer": "Grok"
    },
    "pricing": {
      "completion": "0.0000005",
      "image": "0",
      "input_cache_read": "0.00000005",
      "internal_reasoning": "0",
      "prompt": "0.0000002",
      "request": "0",
      "web_search": "0"
    },
    "top_provider": {
      "context_length": 2000000,
      "is_moderated": false,
      "max_completion_tokens": 30000
    }
  },
  "request": {
    "prompt": "In a single HTML file named index.html, create exact copy of the PAC-MAN game in one html file using css and js.\n",
    "system_prompt": null,
    "temperature": 0.7,
    "max_tokens": 8000
  },
  "response_metadata": {
    "id": "gen-1759410850-pxhcLnbzWHxw1OOMOli5",
    "created": 1759410850,
    "object": "chat.completion"
  },
  "raw_response": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>PAC-MAN Clone</title>\n    <style>\n        body {\n            margin: 0;\n            padding: 0;\n            background: black;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            font-family: Arial, sans-serif;\n        }\n        canvas {\n            border: 2px solid #000080;\n            background: black;\n        }\n        #score {\n            position: absolute;\n            top: 10px;\n            left: 10px;\n            color: yellow;\n            font-size: 20px;\n            font-weight: bold;\n        }\n        #lives {\n            position: absolute;\n            top: 10px;\n            right: 10px;\n            color: yellow;\n            font-size: 20px;\n            font-weight: bold;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"score\">Score: 0</div>\n    <div id=\"lives\">Lives: 3</div>\n    <canvas id=\"gameCanvas\" width=\"380\" height=\"420\"></canvas>\n\n    <script>\n        const canvas = document.getElementById('gameCanvas');\n        const ctx = canvas.getContext('2d');\n        const tileSize = 20;\n        const rows = 21;\n        const cols = 19;\n\n        // Maze layout (1 = wall, 0 = empty/dot, 2 = power pellet, 3 = empty no dot)\n        const maze = [\n            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n            [1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1],\n            [1,2,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,2,1],\n            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n            [1,0,1,1,1,1,0,1,1,0,0,1,1,0,1,1,1,0,1],\n            [1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,1],\n            [1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1],\n            [3,3,3,3,1,0,0,0,0,3,3,0,0,0,0,1,3,3,3],\n            [1,1,1,1,1,0,1,1,0,1,1,0,1,1,0,1,1,1,1],\n            [3,3,3,3,3,0,1,1,0,1,1,0,1,1,0,3,3,3,3],\n            [1,1,1,1,1,0,1,1,0,0,0,0,1,1,0,1,1,1,1],\n            [3,3,3,3,1,0,0,0,0,3,3,0,0,0,0,1,3,3,3],\n            [1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1],\n            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n            [1,0,1,1,1,1,0,1,1,0,0,1,1,0,1,1,1,0,1],\n            [1,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,0,0,1],\n            [1,2,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,2,1],\n            [1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1],\n            [1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1],\n            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n        ];\n\n        let pacman = { x: 9, y: 15, dir: 'right', mouthOpen: true };\n        let ghosts = [\n            { x: 9, y: 9, dir: 'up', color: '#FF0000', mode: 'scatter' }, // Blinky\n            { x: 8, y: 9, dir: 'left', color: '#FFB8FF', mode: 'scatter' }, // Pinky\n            { x: 10, y: 9, dir: 'right', color: '#00FFFF', mode: 'scatter' }, // Inky\n            { x: 11, y: 9, dir: 'down', color: '#FFB852', mode: 'scatter' }  // Clyde\n        ];\n        let score = 0;\n        let lives = 3;\n        let dotsEaten = 0;\n        let totalDots = 0;\n        let gameRunning = true;\n        let frightenedMode = false;\n        let frightenedTimer = 0;\n        let keys = {};\n\n        // Count total dots\n        for (let y = 0; y < rows; y++) {\n            for (let x = 0; x < cols; x++) {\n                if (maze[y][x] === 0 || maze[y][x] === 2) totalDots++;\n            }\n        }\n\n        // Event listeners\n        document.addEventListener('keydown', (e) => {\n            keys[e.key] = true;\n            if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n                e.preventDefault();\n            }\n        });\n        document.addEventListener('keyup', (e) => {\n            keys[e.key] = false;\n        });\n\n        function drawMaze() {\n            for (let y = 0; y < rows; y++) {\n                for (let x = 0; x < cols; x++) {\n                    const posX = x * tileSize;\n                    const posY = y * tileSize;\n                    if (maze[y][x] === 1) {\n                        ctx.fillStyle = '#000080';\n                        ctx.fillRect(posX, posY, tileSize, tileSize);\n                        ctx.strokeStyle = '#0000FF';\n                        ctx.strokeRect(posX, posY, tileSize, tileSize);\n                    } else if (maze[y][x] === 0) {\n                        ctx.fillStyle = 'black';\n                        ctx.fillRect(posX + 8, posY + 8, 4, 4);\n                    } else if (maze[y][x] === 2) {\n                        ctx.fillStyle = 'black';\n                        ctx.fillRect(posX + 6, posY + 6, 8, 8);\n                    }\n                }\n            }\n        }\n\n        function drawPacman() {\n            ctx.fillStyle = 'yellow';\n            ctx.beginPath();\n            const centerX = pacman.x * tileSize + tileSize / 2;\n            const centerY = pacman.y * tileSize + tileSize / 2;\n            if (pacman.dir === 'right') {\n                ctx.arc(centerX, centerY, tileSize / 2, pacman.mouthOpen ? 0.2 * Math.PI : 0, pacman.mouthOpen ? 1.8 * Math.PI : 2 * Math.PI);\n            } else if (pacman.dir === 'left') {\n                ctx.arc(centerX, centerY, tileSize / 2, pacman.mouthOpen ? 1.2 * Math.PI : Math.PI, pacman.mouthOpen ? 0.8 * Math.PI : Math.PI);\n            } else if (pacman.dir === 'up') {\n                ctx.arc(centerX, centerY, tileSize / 2, pacman.mouthOpen ? 1.7 * Math.PI : 1.5 * Math.PI, pacman.mouthOpen ? 1.3 * Math.PI : 0.5 * Math.PI);\n            } else if (pacman.dir === 'down') {\n                ctx.arc(centerX, centerY, tileSize / 2, pacman.mouthOpen ? 0.7 * Math.PI : 0.5 * Math.PI, pacman.mouthOpen ? 0.3 * Math.PI : 1.5 * Math.PI);\n            }\n            ctx.lineTo(centerX, centerY);\n            ctx.fill();\n        }\n\n        function drawGhost(ghost) {\n            const centerX = ghost.x * tileSize + tileSize / 2;\n            const centerY = ghost.y * tileSize + tileSize / 2;\n            ctx.fillStyle = frightenedMode ? '#0000FF' : ghost.color;\n            ctx.beginPath();\n            ctx.arc(centerX, centerY, tileSize / 2, Math.PI, 0);\n            ctx.lineTo(centerX + tileSize / 2, centerY + tileSize / 2);\n            ctx.lineTo(centerX + tileSize / 6, centerY + tileSize / 3);\n            ctx.lineTo(centerX, centerY + tileSize / 2);\n            ctx.lineTo(centerX - tileSize / 6, centerY + tileSize / 3);\n            ctx.lineTo(centerX - tileSize / 2, centerY + tileSize / 2);\n            ctx.lineTo(centerX - tileSize / 2, centerY);\n            ctx.fill();\n            // Eyes\n            ctx.fillStyle = 'white';\n            ctx.beginPath();\n            ctx.arc(centerX - tileSize / 4, centerY - tileSize / 6, tileSize / 6, 0, 2 * Math.PI);\n            ctx.arc(centerX + tileSize / 4, centerY - tileSize / 6, tileSize / 6, 0, 2 * Math.PI);\n            ctx.fill();\n            ctx.fillStyle = 'black';\n            ctx.beginPath();\n            ctx.arc(centerX - tileSize / 4, centerY - tileSize / 6, tileSize / 12, 0, 2 * Math.PI);\n            ctx.arc(centerX + tileSize / 4, centerY - tileSize / 6, tileSize / 12, 0, 2 * Math.PI);\n            ctx.fill();\n        }\n\n        function movePacman() {\n            let newX = pacman.x;\n            let newY = pacman.y;\n            let newDir = pacman.dir;\n\n            if (keys['ArrowUp']) newDir = 'up';\n            if (keys['ArrowDown']) newDir = 'down';\n            if (keys['ArrowLeft']) newDir = 'left';\n            if (keys['ArrowRight']) newDir = 'right';\n\n            if (newDir === 'up') newY--;\n            if (newDir === 'down') newY++;\n            if (newDir === 'left') newX--;\n            if (newDir === 'right') newX++;\n\n            // Wrap around for tunnels\n            if (newX < 0) newX = cols - 1;\n            if (newX >= cols) newX = 0;\n\n            // Check collision with wall\n            if (maze[newY][newX] !== 1) {\n                pacman.x = newX;\n                pacman.y = newY;\n                pacman.dir = newDir;\n\n                // Eat dot or power pellet\n                if (maze[pacman.y][pacman.x] === 0) {\n                    maze[pacman.y][pacman.x] = 3;\n                    score += 10;\n                    dotsEaten++;\n                } else if (maze[pacman.y][pacman.x] === 2) {\n                    maze[pacman.y][pacman.x] = 3;\n                    score += 50;\n                    dotsEaten++;\n                    frightenedMode = true;\n                    frightenedTimer = 300; // ~10 seconds at 30fps\n                }\n            }\n\n            pacman.mouthOpen = !pacman.mouthOpen;\n        }\n\n        function moveGhost(ghost) {\n            // Simplified ghost AI: random movement, avoid walls\n            const directions = ['up', 'down', 'left', 'right'];\n            let newX = ghost.x;\n            let newY = ghost.y;\n            let validMoves = [];\n\n            directions.forEach(dir => {\n                let testX = ghost.x;\n                let testY = ghost.y;\n                if (dir === 'up') testY--;\n                if (dir === 'down') testY++;\n                if (dir === 'left') testX--;\n                if (dir === 'right') testX++;\n                if (testX < 0) testX = cols - 1;\n                if (testX >= cols) testX = 0;\n                if (maze[testY][testX] !== 1 && !(testX === pacman.x && testY === pacman.y)) {\n                    validMoves.push(dir);\n                }\n            });\n\n            if (validMoves.length > 0) {\n                // Bias towards Pac-Man direction (simplified)\n                let targetDir = validMoves[Math.floor(Math.random() * validMoves.length)];\n                if (Math.random() < 0.3) { // 30% chance to chase\n                    const dx = pacman.x - ghost.x;\n                    const dy = pacman.y - ghost.y;\n                    if (Math.abs(dx) > Math.abs(dy)) {\n                        targetDir = dx > 0 ? 'right' : 'left';\n                    } else {\n                        targetDir = dy > 0 ? 'down' : 'up';\n                    }\n                    if (!validMoves.includes(targetDir)) {\n                        targetDir = validMoves[Math.floor(Math.random() * validMoves.length)];\n                    }\n                }\n                if (targetDir === 'up') newY--;\n                if (targetDir === 'down') newY++;\n                if (targetDir === 'left') newX--;\n                if (targetDir === 'right') newX++;\n                ghost.dir = targetDir;\n            }\n\n            if (newX < 0) newX = cols - 1;\n            if (newX >= cols) newX = 0;\n\n            ghost.x = newX;\n            ghost.y = newY;\n\n            // Collision with Pac-Man\n            if (ghost.x === pacman.x && ghost.y === pacman.y) {\n                if (frightenedMode) {\n                    score += 200;\n                    ghost.x = 9; ghost.y = 9; // Return to home\n                } else {\n                    lives--;\n                    if (lives <= 0) {\n                        gameRunning = false;\n                        alert('Game Over! Score: ' + score);\n                    } else {\n                        resetPositions();\n                    }\n                }\n            }\n        }\n\n        function updateFrightened() {\n            if (frightenedMode) {\n                frightenedTimer--;\n                if (frightenedTimer <= 0) {\n                    frightenedMode = false;\n                }\n            }\n        }\n\n        function resetPositions() {\n            pacman = { x: 9, y: 15, dir: 'right', mouthOpen: true };\n            ghosts[0] = { x: 9, y: 9, dir: 'up', color: '#FF0000', mode: 'scatter' };\n            ghosts[1] = { x: 8, y: 9, dir: 'left', color: '#FFB8FF', mode: 'scatter' };\n            ghosts[2] = { x: 10, y: 9, dir: 'right', color: '#00FFFF', mode: 'scatter' };\n            ghosts[3] = { x: 11, y: 9, dir: 'down', color: '#FFB852', mode: 'scatter' };\n        }\n\n        function checkWin() {\n            if (dotsEaten >= totalDots) {\n                gameRunning = false;\n                alert('You Win! Score: ' + score);\n            }\n        }\n\n        function updateUI() {\n            document.getElementById('score').textContent = 'Score: ' + score;\n            document.getElementById('lives').textContent = 'Lives: ' + lives;\n        }\n\n        function gameLoop() {\n            if (!gameRunning) return;\n\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            drawMaze();\n            drawPacman();\n            ghosts.forEach(drawGhost);\n            movePacman();\n            ghosts.forEach(moveGhost);\n            updateFrightened();\n            checkWin();\n            updateUI();\n\n            requestAnimationFrame(gameLoop);\n        }\n\n        // Start game\n        resetPositions();\n        gameLoop();\n    </script>\n</body>\n</html>\n```"
}